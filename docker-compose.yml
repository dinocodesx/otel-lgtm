version: '3.8'

services:
  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./config/otel-collector.yml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8888:8888"   # Internal metrics for monitoring collector itself
      - "8889:8889"   # Prometheus metrics export endpoint
    depends_on:
      - tempo
      - loki
      - prometheus
    networks:
      - otel-lgtm

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_LOG_LEVEL=info
    volumes:
      - ./config/grafana/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./config/grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana-storage:/var/lib/grafana
    networks:
      - otel-lgtm
    depends_on:
      - prometheus
      - loki
      - tempo

  # Prometheus for metrics storage
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=7d'
      - '--storage.tsdb.retention.size=1GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - otel-lgtm

  # Loki for log aggregation
  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    command:
      - '-config.file=/etc/loki/local-config.yaml'
      - '-target=all'
    volumes:
      - ./config/loki.yml:/etc/loki/local-config.yaml
      - loki-data:/loki
    networks:
      - otel-lgtm

  # Tempo for distributed tracing
  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    ports:
      - "3200:3200"   # Tempo HTTP
    command:
      - '-config.file=/etc/tempo.yaml'
    volumes:
      - ./config/tempo.yml:/etc/tempo.yaml
      - tempo-data:/var/tempo
    networks:
      - otel-lgtm

  # Go Application (your API)
  go-api:
    build:
      context: ./app
      dockerfile: ../Dockerfile
    container_name: go-api
    ports:
      - "8080:8080"
    environment:
      - OTEL_SERVICE_NAME=otel-lgtm-api
      - OTEL_SERVICE_VERSION=1.0.0
      - OTEL_ENVIRONMENT=development
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://otel-collector:4318/v1/traces
      - OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://otel-collector:4318/v1/metrics
      - OTEL_EXPORTER_OTLP_LOGS_ENDPOINT=http://otel-collector:4318/v1/logs
      - PROMETHEUS_METRICS_PORT=8080
    depends_on:
      - otel-collector
    networks:
      - otel-lgtm

networks:
  otel-lgtm:
    driver: bridge

volumes:
  grafana-storage:
  prometheus-data:
  loki-data:
  tempo-data: